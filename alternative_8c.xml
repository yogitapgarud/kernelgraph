<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="alternative_8c" kind="file" language="C++">
    <compoundname>alternative.c</compoundname>
    <includes local="no">linux/module.h</includes>
    <includes local="no">linux/sched.h</includes>
    <includes local="no">linux/mutex.h</includes>
    <includes local="no">linux/list.h</includes>
    <includes local="no">linux/stringify.h</includes>
    <includes local="no">linux/mm.h</includes>
    <includes local="no">linux/vmalloc.h</includes>
    <includes local="no">linux/memory.h</includes>
    <includes local="no">linux/stop_machine.h</includes>
    <includes local="no">linux/slab.h</includes>
    <includes local="no">linux/kdebug.h</includes>
    <includes local="no">asm/text-patching.h</includes>
    <includes local="no">asm/alternative.h</includes>
    <includes local="no">asm/sections.h</includes>
    <includes local="no">asm/pgtable.h</includes>
    <includes local="no">asm/mce.h</includes>
    <includes local="no">asm/nmi.h</includes>
    <includes local="no">asm/cacheflush.h</includes>
    <includes local="no">asm/tlbflush.h</includes>
    <includes local="no">asm/io.h</includes>
    <includes local="no">asm/fixmap.h</includes>
    <incdepgraph>
      <node id="5">
        <label>linux/stringify.h</label>
      </node>
      <node id="4">
        <label>linux/list.h</label>
      </node>
      <node id="9">
        <label>linux/stop_machine.h</label>
      </node>
      <node id="19">
        <label>asm/tlbflush.h</label>
      </node>
      <node id="21">
        <label>asm/fixmap.h</label>
      </node>
      <node id="6">
        <label>linux/mm.h</label>
      </node>
      <node id="2">
        <label>linux/sched.h</label>
      </node>
      <node id="0">
        <label>alternative.c</label>
        <link refid="alternative_8c"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>linux/memory.h</label>
      </node>
      <node id="16">
        <label>asm/mce.h</label>
      </node>
      <node id="12">
        <label>asm/text-patching.h</label>
      </node>
      <node id="11">
        <label>linux/kdebug.h</label>
      </node>
      <node id="1">
        <label>linux/module.h</label>
      </node>
      <node id="14">
        <label>asm/sections.h</label>
      </node>
      <node id="15">
        <label>asm/pgtable.h</label>
      </node>
      <node id="3">
        <label>linux/mutex.h</label>
      </node>
      <node id="10">
        <label>linux/slab.h</label>
      </node>
      <node id="20">
        <label>asm/io.h</label>
      </node>
      <node id="7">
        <label>linux/vmalloc.h</label>
      </node>
      <node id="17">
        <label>asm/nmi.h</label>
      </node>
      <node id="18">
        <label>asm/cacheflush.h</label>
      </node>
      <node id="13">
        <label>asm/alternative.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="alternative_8c_1a1f8c165bf4196327bc3abff648276d92" prot="public" static="no">
        <name>pr_fmt</name>
        <param><defname>fmt</defname></param>
        <initializer>&quot;SMP alternatives: &quot; fmt</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="1" column="9" bodyfile="alternative.c" bodystart="1" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="alternative_8c_1a6ae41c42530ccaa5392dd8861729cd93" prot="public" static="no">
        <name>MAX_PATCH_LEN</name>
        <initializer>(255-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="29" column="9" bodyfile="alternative.c" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="alternative_8c_1adc317e4ba9670d4a96e80d1b47570e2e" prot="public" static="no">
        <name>DPRINTK</name>
        <param><defname>fmt</defname></param>
        <param><defname>args...</defname></param>
        <initializer>do {									\
	if (debug_alternative)						\
		printk(KERN_DEBUG &quot;%s: &quot; fmt &quot;\n&quot;, __func__, ##args);	\
} while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="60" column="9" bodyfile="alternative.c" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="alternative_8c_1acf4e5a0d67397c388ffaf20b6bca59bd" prot="public" static="no">
        <name>DUMP_BYTES</name>
        <param><defname>buf</defname></param>
        <param><defname>len</defname></param>
        <param><defname>fmt</defname></param>
        <param><defname>args...</defname></param>
        <initializer>do {									\
	if (unlikely(debug_alternative)) {				\
		int j;							\
									\
		if (!(len))						\
			break;						\
									\
		printk(KERN_DEBUG fmt, ##args);				\
		for (j = 0; j &lt; (len) - 1; j++)				\
			printk(KERN_CONT &quot;%02hhx &quot;, buf[j]);		\
		printk(KERN_CONT &quot;%02hhx\n&quot;, buf[j]);			\
	}								\
} while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="66" column="9" bodyfile="alternative.c" bodystart="66" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="alternative_8c_1a67e915e773268de0133f173e9f9827e9" prot="public" static="no" mutable="no">
        <type>int __read_mostly</type>
        <definition>int __read_mostly alternatives_patched</definition>
        <argsstring></argsstring>
        <name>alternatives_patched</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="25" column="1" bodyfile="alternative.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="alternative_8c_1ac628b2a1dc585068c2acf52cae529227" prot="public" static="yes" mutable="no">
        <type>int __initdata_or_module</type>
        <definition>int __initdata_or_module debug_alternative</definition>
        <argsstring></argsstring>
        <name>debug_alternative</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="31" column="1" bodyfile="alternative.c" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="alternative_8c_1ae3821300f7cefbf0a3dd17cfba39f3be" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int noreplace_smp</definition>
        <argsstring></argsstring>
        <name>noreplace_smp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="40" column="1" bodyfile="alternative.c" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="alternative_8c_1a30966276408de820fff7a7e243c25a50" prot="public" static="no" mutable="no">
        <type>const unsigned char *const  *</type>
        <definition>const unsigned char* const* ideal_nops</definition>
        <argsstring></argsstring>
        <name>ideal_nops</name>
        <initializer>= intel_nops</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="206" column="1" bodyfile="alternative.c" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="alternative_8c_1ab8fcb5f08ebb05bf1e33937cbdfe06b7" prot="public" static="no" mutable="no">
        <type>struct alt_instr</type>
        <definition>struct alt_instr __alt_instructions[]</definition>
        <argsstring>[]</argsstring>
        <name>__alt_instructions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="259" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="alternative_8c_1a1f8e55a992c2727f56d62a85ae2cb1d3" prot="public" static="no" mutable="no">
        <type>struct alt_instr</type>
        <definition>struct alt_instr __alt_instructions_end[]</definition>
        <argsstring>[]</argsstring>
        <name>__alt_instructions_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="271" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="alternative_8c_1a790358c61be373186674dc27d6bff4e2" prot="public" static="no" mutable="no">
        <type>s32</type>
        <definition>s32 __smp_locks[]</definition>
        <argsstring>[]</argsstring>
        <name>__smp_locks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="272" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="alternative_8c_1a5b9ea5d852ee3d46e769b3b895ccf9e8" prot="public" static="no" mutable="no">
        <type>s32</type>
        <definition>s32 __smp_locks_end[]</definition>
        <argsstring>[]</argsstring>
        <name>__smp_locks_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="272" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="alternative_8c_1a858034e766a23a5a2bf615da73e44cdd" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool bp_patching_in_progress</definition>
        <argsstring></argsstring>
        <name>bp_patching_in_progress</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="740" column="1" bodyfile="alternative.c" bodystart="740" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="alternative_8c_1ae53409c523fb218a597bbc36c6a732ec" prot="public" static="yes" mutable="no">
        <type>void *</type>
        <definition>void* bp_int3_handler</definition>
        <argsstring></argsstring>
        <name>bp_int3_handler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="741" column="1" bodyfile="alternative.c" bodystart="741" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="alternative_8c_1ab147df2374a231303249b40c5bdfba05" prot="public" static="yes" mutable="no">
        <type>void *</type>
        <definition>void * bp_int3_addr</definition>
        <argsstring></argsstring>
        <name>bp_int3_addr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="741" column="1" bodyfile="alternative.c" bodystart="741" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="alternative_8c_1a854c66c92c035cd7f0a3646143692d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EXPORT_SYMBOL_GPL</definition>
        <argsstring>(alternatives_patched)</argsstring>
        <name>EXPORT_SYMBOL_GPL</name>
        <param>
          <type>alternatives_patched</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="alternative_8c_1aae43036a82438c43a84bbcb1100b87a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int __init</type>
        <definition>static int __init debug_alt</definition>
        <argsstring>(char *str)</argsstring>
        <name>debug_alt</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="33" column="1" bodyfile="alternative.c" bodystart="33" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="alternative_8c_1a8aa48932920b2c378c3daff0998efda3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>__setup</definition>
        <argsstring>(&quot;debug-alternative&quot;, debug_alt)</argsstring>
        <name>__setup</name>
        <param>
          <type>&quot;debug-alternative&quot;</type>
        </param>
        <param>
          <type>debug_alt</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="alternative_8c_1aacfc28218f14400eccdf06283f040f3f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int __init</type>
        <definition>static int __init setup_noreplace_smp</definition>
        <argsstring>(char *str)</argsstring>
        <name>setup_noreplace_smp</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="42" column="1" bodyfile="alternative.c" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="alternative_8c_1ac3f2b257f04e6c175557ecfef23f61e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>__setup</definition>
        <argsstring>(&quot;noreplace-smp&quot;, setup_noreplace_smp)</argsstring>
        <name>__setup</name>
        <param>
          <type>&quot;noreplace-smp&quot;</type>
        </param>
        <param>
          <type>setup_noreplace_smp</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="alternative_8c_1a3cb430297f6aa0e1f1433f12e04a3225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void __init</type>
        <definition>void __init arch_init_ideal_nops</definition>
        <argsstring>(void)</argsstring>
        <name>arch_init_ideal_nops</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="209" column="1" bodyfile="alternative.c" bodystart="209" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="alternative_8c_1a0118b03dbafdb89f8fda45bef01c1a99" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void __init_or_module</type>
        <definition>static void __init_or_module add_nops</definition>
        <argsstring>(void *insns, unsigned int len)</argsstring>
        <name>add_nops</name>
        <param>
          <type>void *</type>
          <declname>insns</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="259" column="1" bodyfile="alternative.c" bodystart="259" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="alternative_8c_1aa46cdc096c660e53cfb204430f31dff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void *__init_or_module text_poke_early</definition>
        <argsstring>(void *addr, const void *opcode, size_t len)</argsstring>
        <name>text_poke_early</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>opcode</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>text_poke_early - Update instructions on a live kernel at boot time : address to modify : source of the copy : length to copy</para><para>When you use this code to patch more than one byte of an instruction you need to make sure that other CPUs cannot execute this code in parallel. Also no thread must be currently preempted in the middle of these instructions. And on the local CPU you need to be protected again NMI or MCE handlers seeing an inconsistent instruction while you patch. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="273" column="1" bodyfile="alternative.c" bodystart="675" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="alternative_8c_1a834a3ae4a7376f79d4e025c22cad24f0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool is_jmp</definition>
        <argsstring>(const u8 opcode)</argsstring>
        <name>is_jmp</name>
        <param>
          <type>const u8</type>
          <declname>opcode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="278" column="1" bodyfile="alternative.c" bodystart="278" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="alternative_8c_1a440980209aafd38d8784af6f1037abc7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void __init_or_module</type>
        <definition>static void __init_or_module recompute_jump</definition>
        <argsstring>(struct alt_instr *a, u8 *orig_insn, u8 *repl_insn, u8 *insnbuf)</argsstring>
        <name>recompute_jump</name>
        <param>
          <type>struct alt_instr *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>u8 *</type>
          <declname>orig_insn</declname>
        </param>
        <param>
          <type>u8 *</type>
          <declname>repl_insn</declname>
        </param>
        <param>
          <type>u8 *</type>
          <declname>insnbuf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="284" column="1" bodyfile="alternative.c" bodystart="284" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="alternative_8c_1aafeb7af22765dc2d5a14d685c541831a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void __init_or_module noinline</type>
        <definition>static void __init_or_module noinline optimize_nops</definition>
        <argsstring>(struct alt_instr *a, u8 *instr)</argsstring>
        <name>optimize_nops</name>
        <param>
          <type>struct alt_instr *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>u8 *</type>
          <declname>instr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="344" column="1" bodyfile="alternative.c" bodystart="344" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="alternative_8c_1ac2a4a58610487e60c37103f7a9e6aed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void __init_or_module noinline</type>
        <definition>void __init_or_module noinline apply_alternatives</definition>
        <argsstring>(struct alt_instr *start, struct alt_instr *end)</argsstring>
        <name>apply_alternatives</name>
        <param>
          <type>struct alt_instr *</type>
          <declname>start</declname>
        </param>
        <param>
          <type>struct alt_instr *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="369" column="1" bodyfile="alternative.c" bodystart="369" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="alternative_8c_1a201dd9b1b823557face9ab6716f2e926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void __init</type>
        <definition>void __init alternative_instructions</definition>
        <argsstring>(void)</argsstring>
        <name>alternative_instructions</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="622" column="1" bodyfile="alternative.c" bodystart="622" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="alternative_8c_1a3cdcae1516299f52e4bf82463afe0020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* text_poke</definition>
        <argsstring>(void *addr, const void *opcode, size_t len)</argsstring>
        <name>text_poke</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>opcode</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>text_poke - Update instructions on a live kernel : address to modify : source of the copy : length to copy</para><para>Only atomic text poke/set should be allowed when not doing early patching. It means the size must be writable atomically and the address must be aligned in a way that permits an atomic write. It also makes sure we fit on a single page.</para><para>Note: Must be called under text_mutex. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="700" column="1" bodyfile="alternative.c" bodystart="700" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="alternative_8c_1ad513385dbed44cef033e793f845dddd9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void do_sync_core</definition>
        <argsstring>(void *info)</argsstring>
        <name>do_sync_core</name>
        <param>
          <type>void *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="735" column="1" bodyfile="alternative.c" bodystart="735" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="alternative_8c_1aac83ce6c21211c3b52bf2d11190c36ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int poke_int3_handler</definition>
        <argsstring>(struct pt_regs *regs)</argsstring>
        <name>poke_int3_handler</name>
        <param>
          <type>struct pt_regs *</type>
          <declname>regs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="743" column="1" bodyfile="alternative.c" bodystart="743" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="alternative_8c_1ab5e84ef99463159070940280268d3efe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* text_poke_bp</definition>
        <argsstring>(void *addr, const void *opcode, size_t len, void *handler)</argsstring>
        <name>text_poke_bp</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>opcode</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>text_poke_bp() <ndash/> update instructions on live kernel on SMP : address to patch : opcode of new instruction : length to copy : address to jump to when the temporary breakpoint is hit</para><para>Modify multi-byte instruction by using int3 breakpoint on SMP. We completely avoid stop_machine() here, and achieve the synchronization using int3 breakpoint.</para><para>The way it is done:<itemizedlist>
<listitem><para>add a int3 trap to the address that will be patched</para></listitem><listitem><para>sync cores</para></listitem><listitem><para>update all but the first byte of the patched range</para></listitem><listitem><para>sync cores</para></listitem><listitem><para>replace the first byte (int3) by the first byte of replacing opcode</para></listitem><listitem><para>sync cores</para></listitem></itemizedlist>
</para><para>Note: must be called under text_mutex. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alternative.c" line="792" column="1" bodyfile="alternative.c" bodystart="792" bodyend="833"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#define<sp/>pr_fmt(fmt)<sp/>&quot;SMP<sp/>alternatives:<sp/>&quot;<sp/>fmt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;linux/module.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;linux/sched.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;linux/mutex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;linux/list.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;linux/stringify.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;linux/mm.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;linux/vmalloc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;linux/memory.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;linux/stop_machine.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;linux/slab.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;linux/kdebug.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;asm/text-patching.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;asm/alternative.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;asm/sections.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;asm/pgtable.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;asm/mce.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;asm/nmi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;asm/cacheflush.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;asm/tlbflush.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;asm/io.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;asm/fixmap.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__read_mostly<sp/>alternatives_patched;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">EXPORT_SYMBOL_GPL(alternatives_patched);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_PATCH_LEN<sp/>(255-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__initdata_or_module<sp/>debug_alternative;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__init<sp/>debug_alt(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>debug_alternative<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal">__setup(</highlight><highlight class="stringliteral">&quot;debug-alternative&quot;</highlight><highlight class="normal">,<sp/>debug_alt);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>noreplace_smp;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__init<sp/>setup_noreplace_smp(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>noreplace_smp<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal">__setup(</highlight><highlight class="stringliteral">&quot;noreplace-smp&quot;</highlight><highlight class="normal">,<sp/>setup_noreplace_smp);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_PARAVIRT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__initdata_or_module<sp/>noreplace_paravirt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__init<sp/>setup_noreplace_paravirt(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>noreplace_paravirt<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal">__setup(</highlight><highlight class="stringliteral">&quot;noreplace-paravirt&quot;</highlight><highlight class="normal">,<sp/>setup_noreplace_paravirt);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DPRINTK(fmt,<sp/>args...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor">do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(debug_alternative)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printk(KERN_DEBUG<sp/>&quot;%s:<sp/>&quot;<sp/>fmt<sp/>&quot;\n&quot;,<sp/>__func__,<sp/>##args);<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor">}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DUMP_BYTES(buf,<sp/>len,<sp/>fmt,<sp/>args...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor">do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(unlikely(debug_alternative))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>j;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!(len))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printk(KERN_DEBUG<sp/>fmt,<sp/>##args);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(len)<sp/>-<sp/>1;<sp/>j++)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printk(KERN_CONT<sp/>&quot;%02hhx<sp/>&quot;,<sp/>buf[j]);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printk(KERN_CONT<sp/>&quot;%02hhx\n&quot;,<sp/>buf[j]);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor">}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>Each<sp/>GENERIC_NOPX<sp/>is<sp/>of<sp/>X<sp/>bytes,<sp/>and<sp/>defined<sp/>as<sp/>an<sp/>array<sp/>of<sp/>bytes</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>that<sp/>correspond<sp/>to<sp/>that<sp/>nop.<sp/>Getting<sp/>from<sp/>one<sp/>nop<sp/>to<sp/>the<sp/>next,<sp/>we</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>add<sp/>to<sp/>the<sp/>array<sp/>the<sp/>offset<sp/>that<sp/>is<sp/>equal<sp/>to<sp/>the<sp/>sum<sp/>of<sp/>all<sp/>sizes<sp/>of</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>nops<sp/>preceding<sp/>the<sp/>one<sp/>we<sp/>are<sp/>after.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>Note:<sp/>The<sp/>GENERIC_NOP5_ATOMIC<sp/>is<sp/>at<sp/>the<sp/>end,<sp/>as<sp/>it<sp/>breaks<sp/>the</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>nice<sp/>symmetry<sp/>of<sp/>sizes<sp/>of<sp/>the<sp/>previous<sp/>nops.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GENERIC_NOP1)<sp/>&amp;&amp;<sp/>!defined(CONFIG_X86_64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>intelnops[]<sp/>=</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>GENERIC_NOP1,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>GENERIC_NOP2,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>GENERIC_NOP3,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>GENERIC_NOP4,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>GENERIC_NOP5,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>GENERIC_NOP6,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>GENERIC_NOP7,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>GENERIC_NOP8,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>GENERIC_NOP5_ATOMIC</highlight></codeline>
<codeline lineno="102"><highlight class="normal">};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>intel_nops[ASM_NOP_MAX+2]<sp/>=</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>intelnops,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>intelnops<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>intelnops<sp/>+<sp/>1<sp/>+<sp/>2,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>intelnops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>intelnops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>intelnops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>intelnops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>intelnops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6<sp/>+<sp/>7,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>intelnops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6<sp/>+<sp/>7<sp/>+<sp/>8,</highlight></codeline>
<codeline lineno="115"><highlight class="normal">};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>K8_NOP1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>k8nops[]<sp/>=</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>K8_NOP1,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>K8_NOP2,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>K8_NOP3,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>K8_NOP4,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>K8_NOP5,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>K8_NOP6,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>K8_NOP7,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>K8_NOP8,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>K8_NOP5_ATOMIC</highlight></codeline>
<codeline lineno="130"><highlight class="normal">};</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>k8_nops[ASM_NOP_MAX+2]<sp/>=</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>k8nops,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>k8nops<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>k8nops<sp/>+<sp/>1<sp/>+<sp/>2,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>k8nops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>k8nops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>k8nops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>k8nops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>k8nops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6<sp/>+<sp/>7,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>k8nops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6<sp/>+<sp/>7<sp/>+<sp/>8,</highlight></codeline>
<codeline lineno="143"><highlight class="normal">};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(K7_NOP1)<sp/>&amp;&amp;<sp/>!defined(CONFIG_X86_64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>k7nops[]<sp/>=</highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>K7_NOP1,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>K7_NOP2,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>K7_NOP3,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>K7_NOP4,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>K7_NOP5,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>K7_NOP6,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>K7_NOP7,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>K7_NOP8,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>K7_NOP5_ATOMIC</highlight></codeline>
<codeline lineno="158"><highlight class="normal">};</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>k7_nops[ASM_NOP_MAX+2]<sp/>=</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>k7nops,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>k7nops<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>k7nops<sp/>+<sp/>1<sp/>+<sp/>2,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>k7nops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>k7nops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>k7nops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>k7nops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>k7nops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6<sp/>+<sp/>7,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>k7nops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6<sp/>+<sp/>7<sp/>+<sp/>8,</highlight></codeline>
<codeline lineno="171"><highlight class="normal">};</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>P6_NOP1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>p6nops[]<sp/>=</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>P6_NOP1,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>P6_NOP2,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>P6_NOP3,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>P6_NOP4,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>P6_NOP5,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>P6_NOP6,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>P6_NOP7,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>P6_NOP8,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>P6_NOP5_ATOMIC</highlight></codeline>
<codeline lineno="186"><highlight class="normal">};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p6_nops[ASM_NOP_MAX+2]<sp/>=</highlight></codeline>
<codeline lineno="188"><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>p6nops,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>p6nops<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>p6nops<sp/>+<sp/>1<sp/>+<sp/>2,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>p6nops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>p6nops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>p6nops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>p6nops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>p6nops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6<sp/>+<sp/>7,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>p6nops<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6<sp/>+<sp/>7<sp/>+<sp/>8,</highlight></codeline>
<codeline lineno="199"><highlight class="normal">};</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Initialize<sp/>these<sp/>to<sp/>a<sp/>safe<sp/>default<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_X86_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*ideal_nops<sp/>=<sp/>p6_nops;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*ideal_nops<sp/>=<sp/>intel_nops;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__init<sp/>arch_init_ideal_nops(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(boot_cpu_data.x86_vendor)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>X86_VENDOR_INTEL:</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Due<sp/>to<sp/>a<sp/>decoder<sp/>implementation<sp/>quirk,<sp/>some</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>specific<sp/>Intel<sp/>CPUs<sp/>actually<sp/>perform<sp/>better<sp/>with</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>&quot;k8_nops&quot;<sp/>than<sp/>with<sp/>the<sp/>SDM-recommended<sp/>NOPs.</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boot_cpu_data.x86<sp/>==<sp/>6<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_cpu_data.x86_model<sp/>&gt;=<sp/>0x0f<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_cpu_data.x86_model<sp/>!=<sp/>0x1c<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_cpu_data.x86_model<sp/>!=<sp/>0x26<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_cpu_data.x86_model<sp/>!=<sp/>0x27<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_cpu_data.x86_model<sp/>&lt;<sp/>0x30)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ideal_nops<sp/>=<sp/>k8_nops;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boot_cpu_has(X86_FEATURE_NOPL))<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ideal_nops<sp/>=<sp/>p6_nops;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_X86_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ideal_nops<sp/>=<sp/>k8_nops;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ideal_nops<sp/>=<sp/>intel_nops;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>X86_VENDOR_AMD:</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boot_cpu_data.x86<sp/>&gt;<sp/>0xf)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ideal_nops<sp/>=<sp/>p6_nops;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fall<sp/>through<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_X86_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ideal_nops<sp/>=<sp/>k8_nops;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boot_cpu_has(X86_FEATURE_K8))</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ideal_nops<sp/>=<sp/>k8_nops;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boot_cpu_has(X86_FEATURE_K7))</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ideal_nops<sp/>=<sp/>k7_nops;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ideal_nops<sp/>=<sp/>intel_nops;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Use<sp/>this<sp/>to<sp/>add<sp/>nops<sp/>to<sp/>a<sp/>buffer,<sp/>then<sp/>text_poke<sp/>the<sp/>whole<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__init_or_module<sp/>add_nops(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*insns,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>noplen<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(noplen<sp/>&gt;<sp/>ASM_NOP_MAX)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noplen<sp/>=<sp/>ASM_NOP_MAX;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(insns,<sp/>ideal_nops[noplen],<sp/>noplen);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insns<sp/>+=<sp/>noplen;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>-=<sp/>noplen;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">alt_instr<sp/>__alt_instructions[],<sp/>__alt_instructions_end[];</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>s32<sp/>__smp_locks[],<sp/>__smp_locks_end[];</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*text_poke_early(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*opcode,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/>Are<sp/>we<sp/>looking<sp/>at<sp/>a<sp/>near<sp/>JMP<sp/>with<sp/>a<sp/>1<sp/>or<sp/>4-byte<sp/>displacement.</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_jmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>opcode)</highlight></codeline>
<codeline lineno="279"><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opcode<sp/>==<sp/>0xeb<sp/>||<sp/>opcode<sp/>==<sp/>0xe9;</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__init_or_module</highlight></codeline>
<codeline lineno="284"><highlight class="normal">recompute_jump(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>alt_instr<sp/>*a,<sp/>u8<sp/>*orig_insn,<sp/>u8<sp/>*repl_insn,<sp/>u8<sp/>*insnbuf)</highlight></codeline>
<codeline lineno="285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>*next_rip,<sp/>*tgt_rip;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>s32<sp/>n_dspl,<sp/>o_dspl;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>repl_len;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;replacementlen<sp/>!=<sp/>5)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>o_dspl<sp/>=<sp/>*(s32<sp/>*)(insnbuf<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>next_rip<sp/>of<sp/>the<sp/>replacement<sp/>JMP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>next_rip<sp/>=<sp/>repl_insn<sp/>+<sp/>a-&gt;replacementlen;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>target<sp/>rip<sp/>of<sp/>the<sp/>replacement<sp/>JMP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>tgt_rip<sp/><sp/>=<sp/>next_rip<sp/>+<sp/>o_dspl;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>n_dspl<sp/>=<sp/>tgt_rip<sp/>-<sp/>orig_insn;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>DPRINTK(</highlight><highlight class="stringliteral">&quot;target<sp/>RIP:<sp/>%p,<sp/>new_displ:<sp/>0x%x&quot;</highlight><highlight class="normal">,<sp/>tgt_rip,<sp/>n_dspl);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tgt_rip<sp/>-<sp/>orig_insn<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_dspl<sp/>-<sp/>2<sp/>&lt;=<sp/>127)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>two_byte_jmp;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>five_byte_jmp;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>negative<sp/>offset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((n_dspl<sp/>-<sp/>2)<sp/>&amp;<sp/>0xff)<sp/>==<sp/>(n_dspl<sp/>-<sp/>2))</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>two_byte_jmp;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>five_byte_jmp;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal">two_byte_jmp:</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>n_dspl<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>insnbuf[0]<sp/>=<sp/>0xeb;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>insnbuf[1]<sp/>=<sp/>(s8)n_dspl;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>add_nops(insnbuf<sp/>+<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>repl_len<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal">five_byte_jmp:</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>n_dspl<sp/>-=<sp/>5;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>insnbuf[0]<sp/>=<sp/>0xe9;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>*(s32<sp/>*)&amp;insnbuf[1]<sp/>=<sp/>n_dspl;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>repl_len<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal">done:</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>DPRINTK(</highlight><highlight class="stringliteral">&quot;final<sp/>displ:<sp/>0x%08x,<sp/>JMP<sp/>0x%lx&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_dspl,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)orig_insn<sp/>+<sp/>n_dspl<sp/>+<sp/>repl_len);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/>&quot;noinline&quot;<sp/>to<sp/>cause<sp/>control<sp/>flow<sp/>change<sp/>and<sp/>thus<sp/>invalidate<sp/>I$<sp/>and</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/>cause<sp/>refetch<sp/>after<sp/>modification.</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__init_or_module<sp/>noinline<sp/>optimize_nops(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>alt_instr<sp/>*a,<sp/>u8<sp/>*instr)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(instr[0]<sp/>!=<sp/>0x90)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>local_irq_save(flags);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>add_nops(instr<sp/>+<sp/>(a-&gt;instrlen<sp/>-<sp/>a-&gt;padlen),<sp/>a-&gt;padlen);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>local_irq_restore(flags);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>DUMP_BYTES(instr,<sp/>a-&gt;instrlen,<sp/></highlight><highlight class="stringliteral">&quot;%p:<sp/>[%d:%d)<sp/>optimized<sp/>NOPs:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instr,<sp/>a-&gt;instrlen<sp/>-<sp/>a-&gt;padlen,<sp/>a-&gt;padlen);</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*<sp/>Replace<sp/>instructions<sp/>with<sp/>better<sp/>alternatives<sp/>for<sp/>this<sp/>CPU<sp/>type.<sp/>This<sp/>runs</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*<sp/>before<sp/>SMP<sp/>is<sp/>initialized<sp/>to<sp/>avoid<sp/>SMP<sp/>problems<sp/>with<sp/>self<sp/>modifying<sp/>code.</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/>This<sp/>implies<sp/>that<sp/>asymmetric<sp/>systems<sp/>where<sp/>APs<sp/>have<sp/>less<sp/>capabilities<sp/>than</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/>the<sp/>boot<sp/>processor<sp/>are<sp/>not<sp/>handled.<sp/>Tough.<sp/>Make<sp/>sure<sp/>you<sp/>disable<sp/>such</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*<sp/>features<sp/>by<sp/>hand.</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*<sp/>Marked<sp/>&quot;noinline&quot;<sp/>to<sp/>cause<sp/>control<sp/>flow<sp/>change<sp/>and<sp/>thus<sp/>insn<sp/>cache</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/>to<sp/>refetch<sp/>changed<sp/>I$<sp/>lines.</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__init_or_module<sp/>noinline<sp/>apply_alternatives(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>alt_instr<sp/>*start,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>alt_instr<sp/>*end)</highlight></codeline>
<codeline lineno="371"><highlight class="normal">{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">alt_instr<sp/>*a;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>*instr,<sp/>*replacement;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>insnbuf[MAX_PATCH_LEN];</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>DPRINTK(</highlight><highlight class="stringliteral">&quot;alt<sp/>table<sp/>%p<sp/>-&gt;<sp/>%p&quot;</highlight><highlight class="normal">,<sp/>start,<sp/>end);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>scan<sp/>order<sp/>should<sp/>be<sp/>from<sp/>start<sp/>to<sp/>end.<sp/>A<sp/>later<sp/>scanned</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>alternative<sp/>code<sp/>can<sp/>overwrite<sp/>previously<sp/>scanned<sp/>alternative<sp/>code.</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Some<sp/>kernel<sp/>functions<sp/>(e.g.<sp/>memcpy,<sp/>memset,<sp/>etc)<sp/>use<sp/>this<sp/>order<sp/>to</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>patch<sp/>code.</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>So<sp/>be<sp/>careful<sp/>if<sp/>you<sp/>want<sp/>to<sp/>change<sp/>the<sp/>scan<sp/>order<sp/>to<sp/>any<sp/>other</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>order.</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(a<sp/>=<sp/>start;<sp/>a<sp/>&lt;<sp/>end;<sp/>a++)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>insnbuf_sz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instr<sp/>=<sp/>(u8<sp/>*)&amp;a-&gt;instr_offset<sp/>+<sp/>a-&gt;instr_offset;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replacement<sp/>=<sp/>(u8<sp/>*)&amp;a-&gt;repl_offset<sp/>+<sp/>a-&gt;repl_offset;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUG_ON(a-&gt;instrlen<sp/>&gt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(insnbuf));</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUG_ON(a-&gt;cpuid<sp/>&gt;=<sp/>(NCAPINTS<sp/>+<sp/>NBUGINTS)<sp/>*<sp/>32);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!boot_cpu_has(a-&gt;cpuid))<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;padlen<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimize_nops(a,<sp/>instr);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DPRINTK(</highlight><highlight class="stringliteral">&quot;feat:<sp/>%d*32+%d,<sp/>old:<sp/>(%p,<sp/>len:<sp/>%d),<sp/>repl:<sp/>(%p,<sp/>len:<sp/>%d),<sp/>pad:<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;cpuid<sp/>&gt;&gt;<sp/>5,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;cpuid<sp/>&amp;<sp/>0x1f,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instr,<sp/>a-&gt;instrlen,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replacement,<sp/>a-&gt;replacementlen,<sp/>a-&gt;padlen);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMP_BYTES(instr,<sp/>a-&gt;instrlen,<sp/></highlight><highlight class="stringliteral">&quot;%p:<sp/>old_insn:<sp/>&quot;</highlight><highlight class="normal">,<sp/>instr);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMP_BYTES(replacement,<sp/>a-&gt;replacementlen,<sp/></highlight><highlight class="stringliteral">&quot;%p:<sp/>rpl_insn:<sp/>&quot;</highlight><highlight class="normal">,<sp/>replacement);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(insnbuf,<sp/>replacement,<sp/>a-&gt;replacementlen);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insnbuf_sz<sp/>=<sp/>a-&gt;replacementlen;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>0xe8<sp/>is<sp/>a<sp/>relative<sp/>jump;<sp/>fix<sp/>the<sp/>offset.</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Instruction<sp/>length<sp/>is<sp/>checked<sp/>before<sp/>the<sp/>opcode<sp/>to<sp/>avoid</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>accessing<sp/>uninitialized<sp/>bytes<sp/>for<sp/>zero-length<sp/>replacements.</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;replacementlen<sp/>==<sp/>5<sp/>&amp;&amp;<sp/>*insnbuf<sp/>==<sp/>0xe8)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(s32<sp/>*)(insnbuf<sp/>+<sp/>1)<sp/>+=<sp/>replacement<sp/>-<sp/>instr;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DPRINTK(</highlight><highlight class="stringliteral">&quot;Fix<sp/>CALL<sp/>offset:<sp/>0x%x,<sp/>CALL<sp/>0x%lx&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(s32<sp/>*)(insnbuf<sp/>+<sp/>1),</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)instr<sp/>+<sp/>*(s32<sp/>*)(insnbuf<sp/>+<sp/>1)<sp/>+<sp/>5);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;replacementlen<sp/>&amp;&amp;<sp/>is_jmp(replacement[0]))</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recompute_jump(a,<sp/>instr,<sp/>replacement,<sp/>insnbuf);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;instrlen<sp/>&gt;<sp/>a-&gt;replacementlen)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_nops(insnbuf<sp/>+<sp/>a-&gt;replacementlen,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;instrlen<sp/>-<sp/>a-&gt;replacementlen);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insnbuf_sz<sp/>+=<sp/>a-&gt;instrlen<sp/>-<sp/>a-&gt;replacementlen;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMP_BYTES(insnbuf,<sp/>insnbuf_sz,<sp/></highlight><highlight class="stringliteral">&quot;%p:<sp/>final_insn:<sp/>&quot;</highlight><highlight class="normal">,<sp/>instr);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text_poke_early(instr,<sp/>insnbuf,<sp/>insnbuf_sz);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_SMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>alternatives_smp_lock(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>s32<sp/>*start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>s32<sp/>*end,</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u8<sp/>*text,<sp/>u8<sp/>*text_end)</highlight></codeline>
<codeline lineno="442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>s32<sp/>*poff;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_lock(&amp;text_mutex);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(poff<sp/>=<sp/>start;<sp/>poff<sp/>&lt;<sp/>end;<sp/>poff++)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u8<sp/>*ptr<sp/>=<sp/>(u8<sp/>*)poff<sp/>+<sp/>*poff;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*poff<sp/>||<sp/>ptr<sp/>&lt;<sp/>text<sp/>||<sp/>ptr<sp/>&gt;=<sp/>text_end)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>turn<sp/>DS<sp/>segment<sp/>override<sp/>prefix<sp/>into<sp/>lock<sp/>prefix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ptr<sp/>==<sp/>0x3e)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text_poke(ptr,<sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>[]){0xf0}),<sp/>1);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_unlock(&amp;text_mutex);</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>alternatives_smp_unlock(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>s32<sp/>*start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>s32<sp/>*end,</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u8<sp/>*text,<sp/>u8<sp/>*text_end)</highlight></codeline>
<codeline lineno="460"><highlight class="normal">{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>s32<sp/>*poff;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_lock(&amp;text_mutex);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(poff<sp/>=<sp/>start;<sp/>poff<sp/>&lt;<sp/>end;<sp/>poff++)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u8<sp/>*ptr<sp/>=<sp/>(u8<sp/>*)poff<sp/>+<sp/>*poff;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*poff<sp/>||<sp/>ptr<sp/>&lt;<sp/>text<sp/>||<sp/>ptr<sp/>&gt;=<sp/>text_end)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>turn<sp/>lock<sp/>prefix<sp/>into<sp/>DS<sp/>segment<sp/>override<sp/>prefix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ptr<sp/>==<sp/>0xf0)</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text_poke(ptr,<sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>[]){0x3E}),<sp/>1);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_unlock(&amp;text_mutex);</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">smp_alt_module<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>what<sp/>is<sp/>this<sp/>???<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">module<sp/><sp/><sp/>*mod;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*name;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ptrs<sp/>to<sp/>lock<sp/>prefixes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>s32<sp/><sp/><sp/>*locks;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>s32<sp/><sp/><sp/>*locks_end;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>.text<sp/>segment,<sp/>needed<sp/>to<sp/>avoid<sp/>patching<sp/>init<sp/>code<sp/>;)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/><sp/><sp/><sp/><sp/><sp/>*text;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/><sp/><sp/><sp/><sp/><sp/>*text_end;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">list_head<sp/>next;</highlight></codeline>
<codeline lineno="490"><highlight class="normal">};</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>LIST_HEAD(smp_alt_modules);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>DEFINE_MUTEX(smp_alt);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>uniproc_patched<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>protected<sp/>by<sp/>smp_alt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__init_or_module<sp/>alternatives_smp_module_add(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>module<sp/>*mod,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*locks,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*locks_end,</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*text,<sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*text_end)</highlight></codeline>
<codeline lineno="499"><highlight class="normal">{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">smp_alt_module<sp/>*smp;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_lock(&amp;smp_alt);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uniproc_patched)</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>unlock;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_possible_cpus()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Don&apos;t<sp/>bother<sp/>remembering,<sp/>we&apos;ll<sp/>never<sp/>have<sp/>to<sp/>undo<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>smp_unlock;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>smp<sp/>=<sp/>kzalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*smp),<sp/>GFP_KERNEL);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>==<sp/>smp)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we&apos;ll<sp/>run<sp/>the<sp/>(safe<sp/>but<sp/>slow)<sp/>SMP<sp/>code<sp/>then<sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>unlock;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>smp-&gt;mod<sp/><sp/><sp/><sp/>=<sp/>mod;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>smp-&gt;name<sp/><sp/><sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>smp-&gt;locks<sp/><sp/>=<sp/>locks;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>smp-&gt;locks_end<sp/><sp/>=<sp/>locks_end;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>smp-&gt;text<sp/><sp/><sp/>=<sp/>text;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>smp-&gt;text_end<sp/><sp/><sp/>=<sp/>text_end;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>DPRINTK(</highlight><highlight class="stringliteral">&quot;locks<sp/>%p<sp/>-&gt;<sp/>%p,<sp/>text<sp/>%p<sp/>-&gt;<sp/>%p,<sp/>name<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smp-&gt;locks,<sp/>smp-&gt;locks_end,</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smp-&gt;text,<sp/>smp-&gt;text_end,<sp/>smp-&gt;name);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>list_add_tail(&amp;smp-&gt;next,<sp/>&amp;smp_alt_modules);</highlight></codeline>
<codeline lineno="526"><highlight class="normal">smp_unlock:</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>alternatives_smp_unlock(locks,<sp/>locks_end,<sp/>text,<sp/>text_end);</highlight></codeline>
<codeline lineno="528"><highlight class="normal">unlock:</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_unlock(&amp;smp_alt);</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__init_or_module<sp/>alternatives_smp_module_del(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>module<sp/>*mod)</highlight></codeline>
<codeline lineno="533"><highlight class="normal">{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">smp_alt_module<sp/>*item;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_lock(&amp;smp_alt);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry(item,<sp/>&amp;smp_alt_modules,<sp/>next)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mod<sp/>!=<sp/>item-&gt;mod)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;item-&gt;next);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kfree(item);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_unlock(&amp;smp_alt);</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>alternatives_enable_smp(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="548"><highlight class="normal">{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">smp_alt_module<sp/>*mod;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Why<sp/>bother<sp/>if<sp/>there<sp/>are<sp/>no<sp/>other<sp/>CPUs?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>BUG_ON(num_possible_cpus()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_lock(&amp;smp_alt);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uniproc_patched)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pr_info(</highlight><highlight class="stringliteral">&quot;switching<sp/>to<sp/>SMP<sp/>code\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUG_ON(num_online_cpus()<sp/>!=<sp/>1);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clear_cpu_cap(&amp;boot_cpu_data,<sp/>X86_FEATURE_UP);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clear_cpu_cap(&amp;cpu_data(0),<sp/>X86_FEATURE_UP);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_for_each_entry(mod,<sp/>&amp;smp_alt_modules,<sp/>next)</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alternatives_smp_lock(mod-&gt;locks,<sp/>mod-&gt;locks_end,</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mod-&gt;text,<sp/>mod-&gt;text_end);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniproc_patched<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_unlock(&amp;smp_alt);</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>1<sp/>if<sp/>the<sp/>address<sp/>range<sp/>is<sp/>reserved<sp/>for<sp/>smp-alternatives<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alternatives_text_reserved(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*start,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*end)</highlight></codeline>
<codeline lineno="571"><highlight class="normal">{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">smp_alt_module<sp/>*mod;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>s32<sp/>*poff;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>*text_start<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>*text_end<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry(mod,<sp/>&amp;smp_alt_modules,<sp/>next)<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mod-&gt;text<sp/>&gt;<sp/>text_end<sp/>||<sp/>mod-&gt;text_end<sp/>&lt;<sp/>text_start)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(poff<sp/>=<sp/>mod-&gt;locks;<sp/>poff<sp/>&lt;<sp/>mod-&gt;locks_end;<sp/>poff++)<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*)poff<sp/>+<sp/>*poff;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(text_start<sp/>&lt;=<sp/>ptr<sp/>&amp;&amp;<sp/>text_end<sp/>&gt;<sp/>ptr)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_SMP<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_PARAVIRT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__init_or_module<sp/>apply_paravirt(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>paravirt_patch_site<sp/>*start,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>paravirt_patch_site<sp/>*end)</highlight></codeline>
<codeline lineno="595"><highlight class="normal">{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">paravirt_patch_site<sp/>*p;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>insnbuf[MAX_PATCH_LEN];</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(noreplace_paravirt)</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p<sp/>=<sp/>start;<sp/>p<sp/>&lt;<sp/>end;<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>used;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUG_ON(p-&gt;len<sp/>&gt;<sp/>MAX_PATCH_LEN);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>prep<sp/>the<sp/>buffer<sp/>with<sp/>the<sp/>original<sp/>instructions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(insnbuf,<sp/>p-&gt;instr,<sp/>p-&gt;len);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>=<sp/>pv_init_ops.patch(p-&gt;instrtype,<sp/>p-&gt;clobbers,<sp/>insnbuf,</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)p-&gt;instr,<sp/>p-&gt;len);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUG_ON(used<sp/>&gt;<sp/>p-&gt;len);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pad<sp/>the<sp/>rest<sp/>with<sp/>nops<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_nops(insnbuf<sp/>+<sp/>used,<sp/>p-&gt;len<sp/>-<sp/>used);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text_poke_early(p-&gt;instr,<sp/>insnbuf,<sp/>p-&gt;len);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">paravirt_patch_site<sp/>__start_parainstructions[],</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>__stop_parainstructions[];</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>CONFIG_PARAVIRT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__init<sp/>alternative_instructions(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="623"><highlight class="normal">{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>patching<sp/>is<sp/>not<sp/>fully<sp/>atomic,<sp/>so<sp/>try<sp/>to<sp/>avoid<sp/>local<sp/>interruptions</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>might<sp/>execute<sp/>the<sp/>to<sp/>be<sp/>patched<sp/>code.</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Other<sp/>CPUs<sp/>are<sp/>not<sp/>running.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>stop_nmi();</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Don&apos;t<sp/>stop<sp/>machine<sp/>check<sp/>exceptions<sp/>while<sp/>patching.</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>MCEs<sp/>only<sp/>happen<sp/>when<sp/>something<sp/>got<sp/>corrupted<sp/>and<sp/>in<sp/>this</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>case<sp/>we<sp/>must<sp/>do<sp/>something<sp/>about<sp/>the<sp/>corruption.</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Ignoring<sp/>it<sp/>is<sp/>worse<sp/>than<sp/>a<sp/>unlikely<sp/>patching<sp/>race.</highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Also<sp/>machine<sp/>checks<sp/>tend<sp/>to<sp/>be<sp/>broadcast<sp/>and<sp/>if<sp/>one<sp/>CPU</highlight></codeline>
<codeline lineno="635"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>goes<sp/>into<sp/>machine<sp/>check<sp/>the<sp/>others<sp/>follow<sp/>quickly,<sp/>so<sp/>we<sp/>don&apos;t</highlight></codeline>
<codeline lineno="636"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>expect<sp/>a<sp/>machine<sp/>check<sp/>to<sp/>cause<sp/>undue<sp/>problems<sp/>during<sp/>to<sp/>code</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>patching.</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>apply_alternatives(__alt_instructions,<sp/>__alt_instructions_end);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_SMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Patch<sp/>to<sp/>UP<sp/>if<sp/>other<sp/>cpus<sp/>not<sp/>imminent.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!noreplace_smp<sp/>&amp;&amp;<sp/>(num_present_cpus()<sp/>==<sp/>1<sp/>||<sp/>setup_max_cpus<sp/>&lt;=<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniproc_patched<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alternatives_smp_module_add(NULL,<sp/></highlight><highlight class="stringliteral">&quot;core<sp/>kernel&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__smp_locks,<sp/>__smp_locks_end,</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_text,<sp/>_etext);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uniproc_patched<sp/>||<sp/>num_possible_cpus()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_init_pages(</highlight><highlight class="stringliteral">&quot;SMP<sp/>alternatives&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)__smp_locks,</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)__smp_locks_end);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>apply_paravirt(__parainstructions,<sp/>__parainstructions_end);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>restart_nmi();</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>alternatives_patched<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*__init_or_module<sp/>text_poke_early(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*opcode,</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="677"><highlight class="normal">{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>local_irq_save(flags);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(addr,<sp/>opcode,<sp/>len);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>local_irq_restore(flags);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Could<sp/>also<sp/>do<sp/>a<sp/>CLFLUSH<sp/>here<sp/>to<sp/>speed<sp/>up<sp/>CPU<sp/>recovery;<sp/>but</highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>causes<sp/>hangs<sp/>on<sp/>some<sp/>VIA<sp/>CPUs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addr;</highlight></codeline>
<codeline lineno="685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*text_poke(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*opcode,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="701"><highlight class="normal">{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*vaddr;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">page<sp/>*pages[2];</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!core_kernel_text((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)addr))<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pages[0]<sp/>=<sp/>vmalloc_to_page(addr);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pages[1]<sp/>=<sp/>vmalloc_to_page(addr<sp/>+<sp/>PAGE_SIZE);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pages[0]<sp/>=<sp/>virt_to_page(addr);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WARN_ON(!PageReserved(pages[0]));</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pages[1]<sp/>=<sp/>virt_to_page(addr<sp/>+<sp/>PAGE_SIZE);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>BUG_ON(!pages[0]);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>local_irq_save(flags);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>set_fixmap(FIX_TEXT_POKE0,<sp/>page_to_phys(pages[0]));</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pages[1])</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_fixmap(FIX_TEXT_POKE1,<sp/>page_to_phys(pages[1]));</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>vaddr<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)fix_to_virt(FIX_TEXT_POKE0);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;vaddr[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)addr<sp/>&amp;<sp/>~PAGE_MASK],<sp/>opcode,<sp/>len);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_fixmap(FIX_TEXT_POKE0);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pages[1])</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clear_fixmap(FIX_TEXT_POKE1);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>local_flush_tlb();</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>sync_core();</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Could<sp/>also<sp/>do<sp/>a<sp/>CLFLUSH<sp/>here<sp/>to<sp/>speed<sp/>up<sp/>CPU<sp/>recovery;<sp/>but</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>causes<sp/>hangs<sp/>on<sp/>some<sp/>VIA<sp/>CPUs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUG_ON(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)addr)[i]<sp/>!=<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)opcode)[i]);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>local_irq_restore(flags);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addr;</highlight></codeline>
<codeline lineno="733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_sync_core(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*info)</highlight></codeline>
<codeline lineno="736"><highlight class="normal">{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>sync_core();</highlight></codeline>
<codeline lineno="738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bp_patching_in_progress;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*bp_int3_handler,<sp/>*bp_int3_addr;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>poke_int3_handler(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>pt_regs<sp/>*regs)</highlight></codeline>
<codeline lineno="744"><highlight class="normal">{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Having<sp/>observed<sp/>our<sp/>INT3<sp/>instruction,<sp/>we<sp/>now<sp/>must<sp/>observe</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>bp_patching_in_progress.</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>in_progress<sp/>=<sp/>TRUE<sp/><sp/><sp/><sp/><sp/><sp/>INT3</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>WMB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RMB</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>write<sp/>INT3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(in_progress)</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Idem<sp/>for<sp/>bp_int3_handler.</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>smp_rmb();</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(!bp_patching_in_progress))</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(user_mode(regs)<sp/>||<sp/>regs-&gt;ip<sp/>!=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)bp_int3_addr)</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>up<sp/>the<sp/>specified<sp/>breakpoint<sp/>handler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>regs-&gt;ip<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>long)<sp/>bp_int3_handler;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*text_poke_bp(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*opcode,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handler)</highlight></codeline>
<codeline lineno="793"><highlight class="normal">{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>int3<sp/>=<sp/>0xcc;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>bp_int3_handler<sp/>=<sp/>handler;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>bp_int3_addr<sp/>=<sp/>(u8<sp/>*)addr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int3);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>bp_patching_in_progress<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Corresponding<sp/>read<sp/>barrier<sp/>in<sp/>int3<sp/>notifier<sp/>for<sp/>making<sp/>sure<sp/>the</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>in_progress<sp/>and<sp/>handler<sp/>are<sp/>correctly<sp/>ordered<sp/>wrt.<sp/>patching.</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>smp_wmb();</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>text_poke(addr,<sp/>&amp;int3,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int3));</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>on_each_cpu(do_sync_core,<sp/>NULL,<sp/>1);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int3)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>patch<sp/>all<sp/>but<sp/>the<sp/>first<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text_poke((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)addr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int3),</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>opcode<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int3),</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int3));</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>According<sp/>to<sp/>Intel,<sp/>this<sp/>core<sp/>syncing<sp/>is<sp/>very<sp/>likely</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>not<sp/>necessary<sp/>and<sp/>we&apos;d<sp/>be<sp/>safe<sp/>even<sp/>without<sp/>it.<sp/>But</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>better<sp/>safe<sp/>than<sp/>sorry<sp/>(plus<sp/>there&apos;s<sp/>not<sp/>only<sp/>Intel).</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_each_cpu(do_sync_core,<sp/>NULL,<sp/>1);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>patch<sp/>the<sp/>first<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>text_poke(addr,<sp/>opcode,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int3));</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>on_each_cpu(do_sync_core,<sp/>NULL,<sp/>1);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>sync_core()<sp/>implies<sp/>an<sp/>smp_mb()<sp/>and<sp/>orders<sp/>this<sp/>store<sp/>against</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>writing<sp/>of<sp/>the<sp/>new<sp/>instruction.</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>bp_patching_in_progress<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addr;</highlight></codeline>
<codeline lineno="833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="alternative.c"/>
  </compounddef>
</doxygen>
